#!/usr/bin/env node

// Script para probar la conexi√≥n entre frontend y backend
// y verificar si el endpoint de teacher subjects funciona

const BACKEND_URL = 'http://localhost:3001/api-v1';
const TEACHER_ID = 'dfb96a80-56b6-4556-884d-65c53a0072b0'; // ID del teacher de la base de datos

async function testTeacherAPI() {
  console.log('üß™ [TEST] Probando conexi√≥n frontend <-> backend\n');
  console.log(`üîó Backend URL: ${BACKEND_URL}`);
  console.log(`üë®‚Äçüè´ Teacher ID: ${TEACHER_ID}\n`);

  try {
    // 1. Test de conectividad b√°sica
    console.log('1Ô∏è‚É£ PROBANDO CONECTIVIDAD B√ÅSICA...');
    
    try {
      const healthResponse = await fetch(`${BACKEND_URL}/health`);
      if (healthResponse.ok) {
        console.log('‚úÖ Backend responde correctamente');
      } else {
        console.log('‚ö†Ô∏è Backend responde pero con error:', healthResponse.status);
      }
    } catch (error) {
      console.log('‚ùå Backend no responde - ¬øEst√° corriendo?');
      console.log('üí° Ejecutar: cd SchoolAI && npm run start');
      return;
    }

    // 2. Test del endpoint de subjects por creador
    console.log('\n2Ô∏è‚É£ PROBANDO ENDPOINT /subjects/creator/{teacherId}...');
    
    const subjectsURL = `${BACKEND_URL}/subjects/creator/${TEACHER_ID}`;
    console.log(`üîó URL: ${subjectsURL}`);
    
    try {
      const subjectsResponse = await fetch(subjectsURL);
      
      if (subjectsResponse.ok) {
        const subjectsData = await subjectsResponse.json();
        console.log('‚úÖ Endpoint funciona correctamente');
        console.log('üìÑ Respuesta completa del backend:', subjectsData);
        
        // El backend devuelve: { success: true, data: [...], count: n }
        const actualSubjects = subjectsData.success && subjectsData.data ? subjectsData.data : [];
        console.log(`üìä Subjects encontrados: ${Array.isArray(actualSubjects) ? actualSubjects.length : 'No es array'}`);
        
        if (Array.isArray(actualSubjects) && actualSubjects.length > 0) {
          console.log('\nüìö SUBJECTS DEL TEACHER:');
          actualSubjects.forEach((subject, index) => {
            console.log(`   ${index + 1}. ${subject.name}`);
            console.log(`      üìù Descripci√≥n: ${subject.description || 'Sin descripci√≥n'}`);
            console.log(`      üè∑Ô∏è Categor√≠a: ${subject.category || 'Sin categor√≠a'}`);
            console.log(`      üë§ CreatedBy: ${subject.createdBy}`);
            console.log(`      üìÖ Creado: ${subject.createdAt}`);
            console.log(`      üî¢ Subtopics: ${subject.subtopics ? subject.subtopics.length : 0}`);
          });
        } else {
          console.log('‚ùå NO SE ENCONTRARON SUBJECTS PARA ESTE TEACHER');
          console.log('üîç Posibles causas:');
          console.log('   - El teacher ID no coincide con ning√∫n subject.createdBy');
          console.log('   - No hay subjects en la base de datos');
          console.log('   - Error en la consulta del backend');
        }
      } else {
        console.log(`‚ùå Error en endpoint: ${subjectsResponse.status} ${subjectsResponse.statusText}`);
        const errorText = await subjectsResponse.text();
        console.log(`üìÑ Response: ${errorText}`);
      }
    } catch (error) {
      console.log('‚ùå Error de conexi√≥n con endpoint:', error.message);
    }

    // 3. Test de todos los subjects (para comparaci√≥n)
    console.log('\n3Ô∏è‚É£ PROBANDO ENDPOINT /subjects (todos los subjects)...');
    
    try {
      const allSubjectsResponse = await fetch(`${BACKEND_URL}/subjects`);
      
      if (allSubjectsResponse.ok) {
        const allSubjectsData = await allSubjectsResponse.json();
        console.log('‚úÖ Endpoint /subjects funciona');
        console.log(`üìä Total subjects en la base de datos: ${Array.isArray(allSubjectsData) ? allSubjectsData.length : 'No es array'}`);
        
        if (Array.isArray(allSubjectsData) && allSubjectsData.length > 0) {
          console.log('\nüìö TODOS LOS SUBJECTS:');
          allSubjectsData.forEach((subject, index) => {
            console.log(`   ${index + 1}. ${subject.name}`);
            console.log(`      üë§ CreatedBy: ${subject.createdBy || 'NULL'}`);
            console.log(`      üéØ ¬øEs del teacher? ${subject.createdBy === TEACHER_ID ? '‚úÖ S√ç' : '‚ùå NO'}`);
          });
        }
      } else {
        console.log(`‚ùå Error en /subjects: ${allSubjectsResponse.status}`);
      }
    } catch (error) {
      console.log('‚ùå Error con /subjects:', error.message);
    }

    // 4. Test del dashboard completo (simulando lo que hace el frontend)
    console.log('\n4Ô∏è‚É£ SIMULANDO LLAMADA DEL DASHBOARD...');
    
    try {
      console.log('üîÑ Simulando: apiService.getSubjectsByCreator(teacherId)');
      const dashboardResponse = await fetch(`${BACKEND_URL}/subjects/creator/${TEACHER_ID}`);
      
      if (dashboardResponse.ok) {
        const dashboardData = await dashboardResponse.json();
        const actualDashboardSubjects = dashboardData.success && dashboardData.data ? dashboardData.data : [];
        console.log(`üìä Dashboard recibir√≠a: ${Array.isArray(actualDashboardSubjects) ? actualDashboardSubjects.length : 0} subjects`);
        
        if (Array.isArray(actualDashboardSubjects) && actualDashboardSubjects.length > 0) {
          console.log('‚úÖ EL DASHBOARD DEBER√çA MOSTRAR LOS CURSOS');
          console.log('üéâ PROBLEMA RESUELTO: El API fix deber√≠a funcionar');
        } else {
          console.log('‚ùå EL DASHBOARD MOSTRAR√Å "No hay cursos disponibles"');
          console.log('üîß POSIBLE SOLUCI√ìN: Verificar que el usuario logueado tenga el ID correcto');
        }
      } else {
        console.log('‚ùå La llamada que hace el dashboard fallar√≠a');
      }
    } catch (error) {
      console.log('‚ùå Error simulando dashboard:', error.message);
    }

    // 5. Recomendaciones
    console.log('\nüéØ RECOMENDACIONES:');
    console.log('1. Verificar que el usuario logueado en el frontend tenga ID:', TEACHER_ID);
    console.log('2. Verificar que el backend est√© corriendo en puerto 3001');
    console.log('3. Si el API funciona pero el dashboard no muestra datos:');
    console.log('   - Revisar logs del navegador (DevTools Console)');
    console.log('   - Verificar que el hook useTeacherDashboard est√© llamando la funci√≥n correcta');
    console.log('   - Verificar que no haya errores de CORS');

  } catch (error) {
    console.error('‚ùå Error general en el test:', error);
  }
}

// Ejecutar el test
testTeacherAPI().catch(console.error);
